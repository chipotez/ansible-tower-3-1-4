---
- name: Creación de 2 Nodos de infraestructura {{ ':' }} IPA Server & Tower Server
  hosts: localhost
  connection: connection
  gather_facts: False
  vars_files:
     - gce/authentication
     - gce/defaults
     - notification/mail_authentication
  vars:
     attendees: "{{ lookup('file', 'ops-attendees.txt').split('\n') }}"
  tasks:
     - include: commons/setting_defaults.yaml
       tags:
          - always

     - name: email is not defined
       fail: msg="email is not defined"
       when: email is not defined
       tags:
          - always
#UserName:
     - name: Lookup for this email{{ ':' }} {{ email }}
       set_fact: line_selected={{ item }}
       with_items: "{{ attendees }}"
       when: email in item
       tags:
          - always

     - fail: msg="{{ email }} wasn't found into file ops-attendees.txt"
       when: line_selected is not defined
       tags:
          - always

     - set_fact: user_id={{ line_selected.split(',')[0] }}
       tags:
         - always

     - set_fact: name={{ line_selected.split(',')[1] }}
       tags:
          - always

     - name: Defining IPA Server{{ ':' }} {{ user_id }}-ipa
       set_fact: ipa_server="{{ user_id }}-ipa"
       tags:
          - always
# Creando Server GCP
     - name: Creating instance {{ ':' }} {{ ipa_server }}
       gce:
         instance_names: "{{ ipa_server }}"
         state: "present"
         machine_type: "{{ machine_type }}"
         image: "{{ image }}"
         zone: "{{ zone }}"
         network: "{{ network_name }}"
         subnetwork: "{{ subnetwork_name }}"
         tags: ["enable-ssh","openshift-master"]
         disk_auto_delete: True
         project_id: "{{ gce_project_id }}"
         credentials_file: "{{ gce_credentials_file }}"
         service_account_email: "{{ gce_service_account_email }}"
       ignore_errors: True
       register: master_instance_creation

     - debug: var=master_instance_creation

     - name: Getting IPA Server Public IP{{ ':' }} {{ master_instance_creation.instance_data[0].public_ip }}
       set_fact: ipa_server_public_ip={{ master_instance_creation.instance_data[0].public_ip }}

     - name: Wait for IPA Server instance to be up{{ ':' }} {{ ipa_server_public_ip }}
       wait_for: host="{{ ipa_server_public_ip }}" port="{{ ssh_default_image_port }}"  delay=60  state=started

     - name: Adding IPA Server into group{{ ':' }} ipa_hosts
       add_host: groups=ipa_server_group hostname={{ ipa_server_public_ip }}
                 ansible_user={{ ssh_default_image_user }} ansible_password={{ ssh_default_image_password }}
                 ansible_port={{ ssh_default_image_port }}

# Configuracion post-instalación basica
- name: Preparing all the hosts with a basic configuration
  hosts: all
  gather_facts: False
  vars_files:
     - gce/defaults
  tasks:
     - name: Loading SSH KEY from localhost (if any)
       set_fact: ssh_key="{{ lookup('file','{{ ssh_key_file }}') }}"
       when: ssh_key_file is defined
       tags:
          - prepare

     - name: Copy a SSH Key (if does exist)
       lineinfile: dest=/root/.ssh/authorized_keys state=present create=yes line="{{ ssh_key }}"
       when: ssh_key is defined
       tags:
          - prepare

     - name: Registrando Sistema en Portal de Red Hat
       command: subscription-manager register --username='m.pineda' --password='redhat2016!.-'
       ignore_errors: True

     - name: Asignando Pool de Suscripciones
       command: subscription-manager attach --pool=8a85f9815dbd9297015dbdb8186b428d
       ignore_errors: True

     - name: Deshabilitando Repositorios innecesarios
       command: subscription-manager repos --disable="*"
       ignore_errors: True

     - name: Asignando repositorios necesarios instalación minimal
       command: subscription-manager repos --enable="rhel-7-server-rpms"  --enable="rhel-7-server-extras-rpms" --enable="rhel-7-server-optional-rpms"
       ignore_errors: True
     
     - name: Actualizando Sistema Operativo
       yum:
         name: '*'
         state: latest
       
# IPA Server
- name: Instalacion de Servidor IPA
  hosts: ipa_server_group
  gather_facts: True
  vars_files:
     - gce/defaults
  vars_prompt:
     - name: "real_password"
       prompt: "Enter admin password"
       private: yes
  
     - name: "domain_password"
       prompt: "Enter manager password"
       private: yes

  tasks:
     - name: Instalando Paquetes necesarios de Servidor IPA.
       yum: name=ipa-server state=present
       yum: name=bind-dyndb-ldap state=present
       yum: name=ipa-server-dns state=present
        
     - name: Configurando nombre de Servidor IPA
       hostname:
         name: "{{ server_hostname }}"

     - name: Abriendo puertos de firewall.
       command: firewall-cmd --permanent --add-service ntp
       command: firewall-cmd --permanent --add-service http
       command: firewall-cmd --permanent --add-service https
       command: firewall-cmd --permanent --add-service ldap
       command: firewall-cmd --permanent --add-service ldaps
       command: firewall-cmd --permanent --add-service kerberos
       command: firewall-cmd --permanent --add-service kpasswd
       command: firewall-cmd --permanent --add-service dns

     - name: Reiniciando servicio  firewalld
       service: name=firewalld state=reloaded

     - name: Run the ipa-server-install command
       command: ipa-server-install --ip-address="{{ ansible_default_ipv4.address }}" -r "{{ realm }}" -n "{{ domain }}" -p "{{ real_password }}" -a "{{ domain_password }}" --mkhomedir --setup-dns --auto-reverse --auto-forwarders --allow-zone-overlap --unattended


# Notificaciones de usuarios
- name: Final Steps. Removing undesirable tags and notifying user
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
     - notification/mail_authentication
     - notification/slack_authentication
  tasks:
     - include: commons/setting_defaults.yaml

     - include: commons/ops-mail-ipa.yaml
       when: default_smtp_server is defined and default_smtp_server is not none and default_smtp_port is defined and default_smtp_port is not none and default_smtp_username is defined and default_smtp_username is not none and default_smtp_password is defined and default_smtp_password is not none
       tags:
          - mail

     - name: Notifying by Slack about sucessfully creation
       slack: token={{ default_slack_token }} msg="TestDrive@Ops{{ ':' }} Environment for {{ name }} ({{ user_id }}) was successfully created"
       when: default_slack_token is defined and default_slack_token is not none
